### Arrays

	1. Array is the collection of elements of same type.

	2. Arrays are vectoe variables.

		1) scalar -> Can store only one value.
		2) vector -> Can store more than one value.

## Declarations of Array

	1. Method 1 (Just Declaration):-

		Example: 
			int Arr[5]; // Here the values are not initialized they are garbage

	2. Method 2 (Declaration & Initialization):-

		Example:
			int Arr[5] = {1,2,3,4,5}; // Here the size is not manditary to be specified.

	3. Method 3 (Declaration & Partial Intialization):-

		Example:
			int Arr[5] = {1,2} // Here the remaining 3 elements are initialized with zero.


## Accessing Array Elements

	To access the array elements, index is used retrive the element at specific index.

	1. Method 1 (Bracket notation):-

		Example:-
			Arr[1];

	2. Method 2 (Bracket notation with slightly different syntax):-

		Example:-
			1[Arr];

	3. Method 3 (Pointer Arithmetic or Pointer Notation):-

		Example:-
			*(Arr + 1); // This will interpreted as *(Arr + 1 * sizeof(data_type_of_Arr))


## Static Arrays Vs Dynamic Arrays

	# Static Arrays

		The size of the array should be constant in compile time, once declared that can't be changed in runtimw.   

	# Variable Length Arrays (VLA)

		The size of the array is determined at runtime, by getting size from the user.

	# Dynamic Arrays

		Arrays that are allocated in heap and has the reference to that heap location in stack. This type of array size are determined at runtime and can resized to grow or shrink based on the requirements.

		The heap segment is generally considered an unordered collection of data in memory. In memory management, the heap is used for dynamic memory allocation, where memory blocks are allocated and deallocated at runtime. Unlike the stack, which follows a strict LIFO (Last In, First Out) order, the heap does not impose any specific order on how memory is allocated or freed.

		Since allocations on the heap are made based on availability and size of free memory blocks, the data stored in the heap can be scattered across different locations, making it appear unordered.

## Dimensions of Array and Memory Representation

		## Row Major Mapping
 
		int Arr[3][4];


		# Logical Representation

		R\C  0		 1		 2		  3
		0   A(0,0)	A(0,1)		A(0,2)		A(0,3)
		1   A(1,0)	A(1,1)		A(1,2)		A(1,3)
		2   A(2,0)	A(2,1)		A(2,2)		A(2,3)


		# Actual Memory Representation (Flat Representation)

		A(0,0) | A(0,1) | A(0,2) | A(0,3) || A(1,0) | A(1,1) | A(1,2) | A(1,3) || A(2,0) | A(2,1) | A(2,2) | A(2,3)

		# Formula used by Compiler to Fetch Elements

		Formula :- (Base_Address + [ nCols * i + j] * sizeof(data_type_of_array))

		Example 1:-
			A[1][2] :- (Base_Address + [ 4 * 1 + 2] * sizeof(int))

		Example 2:-
			A[2][3] :- (Base_Address + [ 4 * 2 + 3] * sizeof(int))


				
		## Column Major Mapping

                int Arr[3][4];


                # Logical Representation

                C\R  0           1               2                3
                0   A(0,0)      A(0,1)          A(0,2)          A(0,3)
                1   A(1,0)      A(1,1)          A(1,2)          A(1,3)
                2   A(2,0)      A(2,1)          A(2,2)          A(2,3)

		# Actual Memory Representation (Flat Representation)

		A(0,0) | A(1,0) | A(2,0) || A(0,1) | A(1,1) | A(2,1) || A(0,2) | A(1,2) | A(2,2) || A(0,3) | A(1,3) | A(2,3)

		# Formula used by Compiler to Fetch Elements

		Formula:- (Base_Address + [ nRows * j + i] * sizeof(data_type_of_array))

		Example 1:-
			A[1][2] :- (Base_Address + [ 3 * 2 + 1] * sizeof(int))

		Example 2:-
			A[1][3] :- (Base_Address + [ 3 * 3 + 1] * sizeof(int))


## N-Dimensions of Array Formula Calculation

		# Row Major Mapping

		Arr[i1][i2][i3][i4] :- (Base_Address + [ (i1 * d2 * d3 * d4) + (i2 * d3 * d4) + (i3 * d4) + i4 ] * sizeof(data_type_of_array))

		# Column Major Mapping

		Arr[i1][i2][i3][i4] :- (Base_Address + [ (i4 * d1 * d2 * d3) + (i3 * d1 * d2) + (i2 * d1) + i1 ] * sizeof(data_type_of_array))

